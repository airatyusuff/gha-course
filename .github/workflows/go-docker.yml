# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Go web-server

env:
  AZURE_WEBAPP_NAME: gha

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log in to Azure container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghacourse.azurecr.io
          username: ${{ secrets.CONTAINER_USERNAME }}
          password: ${{ secrets.CONTAINER_PASSWORD }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV} # ',,' is Bash syntax to convert to lowercase

      - name: Build and push container image to registry
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          push: true
          tags: ghacourse.azurecr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./go-app/Dockerfile
          
        # if I were to deploy the Go api with the db setup
        #   secrets: DBTYPE=${{ secrets.DBTYPE }}, DBHOST=${{ secrets.DBHOST }}, DBNAME=${{ secrets.DBNAME }}, DBUSER=${{ secrets.DBUSER }}, DBPASSWORD=${{ secrets.DBPASSWORD }}, DBSSLMODE=${{ secrets.DBSSSLMODE }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go env
        uses: actions/setup-go@v5.0.2
        with:
            go-version: '>=1.17.0'
    
      - run: go version

      - name: Run tests
        run: |
          echo "Running tests..."
          cd go-app/
          go test ./...

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: Azure/webapps-deploy@v3.0.1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghacourse.azurecr.io/${{ env.REPO }}:${{ github.sha }}'
        
        # if I were to deploy the Go api with the db setup
        # env:
        #     DBTYPE: ${{ secrets.DBTYPE }}
        #     DBHOST: ${{ secrets.DBHOST }}
        #     DBNAME: ${{ secrets.DBNAME }}
        #     DBUSER: ${{ secrets.DBUSER }}
        #     DBPASSWORD: ${{ secrets.DBPASSWORD }}
        #     DBSSLMODE: ${{ secrets.DBSSSLMODE }}
